{
    "swagger": "2.0",
    "info": {
        "title": "My Petstore",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/pet": {
            "put": {
                "description": "Update an existing pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Update a pet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be updated",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PetResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new pet to the store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Add a pet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PetResponse"
                        }
                    }
                }
            }
        },
        "/pet/findByStatus": {
            "get": {
                "description": "Multiple status values can be provided with comma separated strings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Find pets by status",
                "parameters": [
                    {
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ],
                        "type": "string",
                        "description": "Status values that need to be considered for filter",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PetFindByStatusResponse"
                        }
                    }
                }
            }
        },
        "/pet/{id}": {
            "get": {
                "description": "Returns a single pet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet to return",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PetResponseData"
                        }
                    }
                }
            },
            "post": {
                "description": "Updates pet in the store with form data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Update a pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pet object that needs to be updated",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PetResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a pet by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Delete a pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PetResponse"
                        }
                    }
                }
            }
        },
        "/store/inventory": {
            "get": {
                "description": "Return pet inventories by status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.InventoryResponse"
                        }
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "description": "Returns a map of status codes to quantities",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "parameters": [
                    {
                        "description": "order placed for purchasing the pet",
                        "name": "Order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PlaceOrderResponse"
                        }
                    }
                }
            }
        },
        "/store/order/{id}": {
            "get": {
                "description": "Returning order by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Find purchased order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of order to return",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PlaceOrderResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deleting purchased order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Delete purchased order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of order to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.DeleteOrderResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/controller.LogoutResponse"
                        }
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "description": "Create multiple users with an array of user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create users with an array",
                "parameters": [
                    {
                        "description": "Array of user data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users created",
                        "schema": {
                            "$ref": "#/definitions/controller.GetUsersResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate a user by username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Terminate the user session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logout success",
                        "schema": {
                            "$ref": "#/definitions/controller.LogoutResponse"
                        }
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve user data by username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "$ref": "#/definitions/controller.GetUserResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user data by username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user data",
                        "schema": {
                            "$ref": "#/definitions/controller.GetUserResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a user by username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "$ref": "#/definitions/controller.LogoutResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.DataPets": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "pets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Pet"
                    }
                }
            }
        },
        "controller.DeleteOrderResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "controller.GetUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user": {
                    "$ref": "#/definitions/entity.User"
                }
            }
        },
        "controller.GetUsersResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.User"
                    }
                }
            }
        },
        "controller.InventoryResponse": {
            "type": "object"
        },
        "controller.LogoutResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "string",
                    "example": "Logiut success"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "controller.PetFindByStatusResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/controller.DataPets"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "controller.PetResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "controller.PetResponseData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/models_pet_controller.Data"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "controller.PlaceOrderResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/models_store_controller.Data"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "entity.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.Order": {
            "type": "object",
            "properties": {
                "complete": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "pet_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "ship_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.Pet": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/entity.Category"
                },
                "category_id": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.PetStatus"
                }
            }
        },
        "entity.PetStatus": {
            "type": "string",
            "enum": [
                "available",
                "pending",
                "sold"
            ],
            "x-enum-varnames": [
                "PetStatusAvailable",
                "PetStatusPending",
                "PetStatusSold"
            ]
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "user_status": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models_pet_controller.Data": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "pet": {
                    "$ref": "#/definitions/entity.Pet"
                }
            }
        },
        "models_store_controller.Data": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "pet": {
                    "$ref": "#/definitions/entity.Order"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer\" followed by a space and the JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Access to Petstore orders",
            "name": "pet"
        },
        {
            "description": "Everything about your Pets",
            "name": "store"
        },
        {
            "description": "Operations about user",
            "name": "user"
        }
    ]
}